package com.st.ict.qs.notice.dao.impl;

import java.util.List;

import org.omg.CORBA.CTX_RESTRICT_SCOPE;

import st.ict.qs.core.db.DAOException;
import st.ict.qs.core.parser.XmlReader;
import st.ict.qs.core.util.GeneralUtils;
import st.ict.qs.core.util.string.StringUtils;

import com.st.ict.qs.notice.businessbean.Notice;
import com.st.ict.qs.notice.businessbean.Notification;
import com.st.ict.qs.notice.businessbean.NotificationDetail;
import com.st.ict.qs.notice.dao.NotificationDAO;
import com.st.ict.qs.notice.web.constants.QueryConstant;

public class NotificationDAOImpl extends BaseDAOImpl implements NotificationDAO {

	@Override
	public List<Notification> getImpactedCustomer(Integer noticeId)
			throws DAOException {
		List<Notification> notifications = null;

		try {
			Object[] id = new Object[1];
			id[0] = noticeId;
			logger.info("NotificationDAOImpl : getImpCust : Started");
			String query = XmlReader
					.getQuery(QueryConstant.S_ALL_CUSTOMER_NOTIFICATION);

			notifications = getDataForQuery(query, id);
			logger.info("NotificationDAOImpl : getImpactedCustomer : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : getImpactedCustomer : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}
		return notifications;

	}

	@Override
	public void saveNotification(List<Notification> notifications, Notice notice)
			throws DAOException {
		try {
			logger.info("NotificationDAOImpl : saveNotification : Started");

			for (Notification notification : notifications) {
				notification.setNotice(notice);
				saveOrUpdateObject(notification);

			}

			logger.info("NotificationDAOImpl : saveNotification : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : saveNotification : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}

	}

	@Override
	public void deleteNotification(List<Notification> notifications)
			throws DAOException {

		try {
			logger.info("NotificationDAOImpl : deleteNotification : Started");

			for (Notification notification : notifications) {

				deleteObject(notification);

			}
			logger.info("NotificationDAOImpl : deleteNotification : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : deleteNotification : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}

	}

	@Override
	public List<Notification> getNotification(int noticeId) throws DAOException {
		

		List<Notification> notifications = null;
		try {
			
			
			logger.info("NotificationDAOImpl : getNotification : Started");
			String query = XmlReader
					.getQuery(QueryConstant.GET_ALL_NOTIFICATION);

			notifications = getDataForQuery(query);
			logger.info("NotificationDAOImpl : getNotification : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : getNotification : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}
		return notifications;
	}

	@Override
	public List<Notification> getNotification() throws DAOException {
		
		List<Notification> notifications = null;
		try {
			
			
			logger.info("NotificationDAOImpl : getNotification : Started");
			//System.out.println("noticeID::"+noticeId);
			
			String query = XmlReader
					.getQuery(QueryConstant.GET_ALL_NOTIFICATION_FOR_BATCH);

			notifications = getDataForQuery(query);
			logger.info("NotificationDAOImpl : getNotification : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : getNotification : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
		}
		return notifications;
	}

	
	public List<NotificationDetail> getNotificationDetailBYNoticeId(
			Integer noticeId) throws DAOException {
		List<NotificationDetail> notificationDetails = null;

		try {
			Object[] id = new Object[1];
			id[0] = noticeId;
			logger.info("NotificationDAOImpl : getImpCust : Started");
			String query = XmlReader
					.getQuery(QueryConstant.GET_NOTIFICATIONDETAIL_BY_NOTICEID);

			notificationDetails = getDataForQuery(query,id);
			logger.info("NotificationDAOImpl : getImpactedCustomer : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : getImpactedCustomer : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}
		return notificationDetails;

	}

	@Override
	public List<NotificationDetail> getNotificationDetailBYNotificationId(
			String notificationId) throws DAOException {
		List<NotificationDetail> notificationDetails = null;
		try {

			logger.info("NotificationDAOImpl : getImpCust : Started");
			String query = XmlReader
					.getQuery(QueryConstant.GET_NOTIFICATIONDETAIL_BY_NOTIFICATIONID);
			query = query
					+ StringUtils
							.listOfCommaSeparatedValuesToSQLInListOfValues(notificationId);
			notificationDetails = getDataForQuery(query);
			logger.info("NotificationDAOImpl : getImpactedCustomer : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : getImpactedCustomer : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}
		return notificationDetails;
	}

	@Override
	public List<Notice> getOnGoingCustPCN(String customerGroupCode)
			throws DAOException {
		// TODO Auto-generated method stub
		List<Notice> notices = null;
		try {

			logger.info("NotificationDAOImpl : getImpCust : Started");
			String query = XmlReader
					.getQuery(QueryConstant.GET_ONGOING_PCPN_BY_CUSTOMERCODE);
			query = query
					+ StringUtils
							.listOfCommaSeparatedValuesToSQLInListOfValues(customerGroupCode);
			notices = getDataForQuery(query);
			logger.info("NotificationDAOImpl : getImpactedCustomer : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : getImpactedCustomer : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}
		return notices;
	}

	@Override
	public List<Notification> getNotificationList(String notificationIds)
			throws DAOException {
		List<Notification> notificationList = null;
		try {

			logger.info("NotificationDAOImpl : getImpCust : Started");
			String query = XmlReader
					.getQuery(QueryConstant.GET_NOTIFICATIONDETAIL_FOR_NOTIFICATIONID);
			query = query
					+ StringUtils
							.listOfCommaSeparatedValuesToSQLInListOfValues(notificationIds);
			notificationList = getDataForQuery(query);
			logger.info("NotificationDAOImpl : getImpactedCustomer : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : getImpactedCustomer : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}
		return notificationList;
	}

	@Override
	public void saveNotification(List<Notification> notificationList)
			throws DAOException {

		try {
			logger.info("NotificationDAOImpl : saveNotification : Started");

			for (Notification notification : notificationList) {
				saveOrUpdateObject(notification);
			}
			logger.info("NotificationDAOImpl : saveNotification : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : saveNotification : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}

	}

	@Override
	public List<Notification> getAllNotificationsForSendingTab(int noticeId)
			throws DAOException {
		List<Notification> notificationList = null;

		try {
			Object[] id = new Object[1];
			id[0] = noticeId;
			logger.info("NotificationDAOImpl : getAllNotificationsForSendingTab : Started");
			String query = XmlReader
					.getQuery(QueryConstant.S_ALL_NOTIFICATION_SENDING);
			// notificationList = searchNativeSQL(query, id);
			notificationList = getDataForQuery(query, id);
			logger.info("NotificationDAOImpl : getAllNotificationsForSendingTab : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : getAllNotificationsForSendingTab : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}
		return notificationList;

	}

	@Override
	public List<Notification> getAllNotificationsForFse(int noticeId,
			String eduid) throws DAOException {
		List<Notification> notificationList = null;

		try {
			Object[] id = new Object[2];
			id[0] = noticeId;
			id[1] = eduid;
			logger.info("NotificationDAOImpl : getAllNotificationsForSendingTab : Started");
			String query = XmlReader
					.getQuery(QueryConstant.GET_NOTIFICATIOND_BY_NOTICEID);
			// notificationList = searchNativeSQL(query, id);
			notificationList = getDataForQuery(query, id);
			logger.info("NotificationDAOImpl : getAllNotificationsForSendingTab : Ended");

		} catch (DAOException e) {
			logger.error("NotificationDAOImpl : getAllNotificationsForSendingTab : Invocation Target Exception Caught"
					+ GeneralUtils.getStackTrace(e));
			throw e;
		}
		return notificationList;

	}

}
